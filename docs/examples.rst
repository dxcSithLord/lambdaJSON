Examples========Here you will find some more advanced examples of using the lambdaJSON lib.Serialize an inherited class____________________________It is easy to serialize a class if it is just inherited from builtin types, but serializing classes that are inherited from third party classes is a little tricky. see the examples to find out how to serialize these classes with lambdaJSON.Serialize QWidget inheritance-----------------------------When you are deserializing a class, lambdaJSON first searches for bases of the class inside the globals, if it did not find the base class it will try builtins, if not found an exception will be raised.if you serialize a class that is inherited by a QtGui.QWidget, you will find out that the base class for this class is <class 'PySide.QtGui.QWidget'>, so in order to deserialize this class, you need to have 'PySide.QtGui.QWidget' in your globals dict (or just the globals you pass to deserialization function).Simply importing QtGui from PySide will not work, and i will not create a function to search for the base class inside the globals because of security issues (idk if i change my mind or not). here is how you can serialize these classes::    >>> import lambdaJSON    >>> from PySide import QtGui    >>> class myWidget(QtGui.QWidget):            pass        	    >>> serializedClass = lambdaJSON.serialize(myWidget)    >>> newClass = lambdaJSON.deserialize(serializedClass, globs = lambda: {'PySide.QtGui.QWidget': QtGui.QWidget})	Count Execution of deserialized function----------------------------------------I could develop lambdaJSON in a way that you just could pass a dictionary with references as globals, but i decided to accept functions instead of a dict, *to add more controling power*. with this, you can do some nice hacks, and one of them is this. The example source is::    >>> import lambdaJSON    >>> times = 0    >>> def g():            global times            times += 1            print('function executed %s time%s'%(times, '' if times == 1 else 's'))            return globals()        >>> def f(x): return x        >>> mySerializedFunction = lambdaJSON.serialize(f)    >>> myNewFunction  = lambdaJSON.deserialize(mySerializedFunction, globs = g)    >>> myNewFunction(2)    function executed 1 time    2    >>> myNewFunction(2)    function executed 2 times    2    >>>